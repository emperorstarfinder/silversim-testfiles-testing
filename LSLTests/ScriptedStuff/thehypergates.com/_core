//
// Copyright 2009-2013 Zvi ben Yaakov (a.k.a rdc) <hypergate.src@infosoc.net> http://TheHyperGates.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// HyperGate Version 0.7.3




/////////////// begin shared display functions ////////

integer debugTags = 0;

string moduleDisplayName = "Core Module";
string displayStatus = "";

publishDisplay(string status){

    if(!( status == "")){
        displayStatus = status;
    }
    if(!( displayStatus == "")){
        llMessageLinked(LINK_SET, 0, "##display##updateSetText##" + moduleDisplayName + "|" + displayStatus , NULL_KEY);

    }
}


publishDebug(string status){

    if(!( status == "")){
        //        displayStatus = status;
    }
    llMessageLinked(LINK_SET, 0, "##debug##updateSetDebug##" + moduleDisplayName + "##" + llDumpList2String(initDisplayData, "|") , NULL_KEY);

}


/////////////// begin  display related functions ////////

// Returns number of Strides in a List

integer fncStrideCount(list lstSource, integer intStride)
{
    return llGetListLength(lstSource) / intStride;
}


// Find a Stride within a List (returns stride index, and item subindex)
list fncFindStride(list lstSource, list lstItem, integer intStride)
{
    integer intListIndex = llListFindList(lstSource, lstItem);

    if (intListIndex == -1) { return [-1, -1]; }

    integer intStrideIndex = intListIndex / intStride;
    integer intSubIndex = intListIndex % intStride;

    return [intStrideIndex, intSubIndex];
}

// Replace a Stride in a List
list fncReplaceStride(list lstSource, list lstStride, integer intIndex, integer intStride)
{
    integer intNumStrides = fncStrideCount(lstSource, intStride);

    if (llGetListLength(lstStride) != intStride) { return lstSource; }

    if (intNumStrides != 0 && intIndex < intNumStrides)
    {
        integer intOffset = intIndex * intStride;
        return llListReplaceList(lstSource, lstStride, intOffset, intOffset + (intStride - 1));
    }
    return lstSource;
}


list initDisplayData = [];
integer displayStrideLength = 2;

list checkExistingDisplays(string displayName){


    return fncFindStride(initDisplayData, [displayName], displayStrideLength);

}



ownerSayTag(string data){

    if(debugTags == 1){
        llOwnerSay("(" + moduleDisplayName +  ")" + data);
    }

}


addInitDisplayData(string displayName, string displayStatus){

    initDisplayData += [displayName]; // name displayed on left
    initDisplayData += [displayStatus]; // status displayed on right

}


updateInitDisplayData(list initData, integer displayIndex){


    initDisplayData = fncReplaceStride(initDisplayData, initData, displayIndex, displayStrideLength);

}


refreshInitDisplayData(list initData){

    string displayName = "";
    string displayStatus = "";

    // this block copies Init data into strings that you can use
    displayName = llList2String(initData, 0);
    displayStatus = llList2String(initData, 1);


    list displayExists = checkExistingDisplays(displayName);
    integer displayIndex = llList2Integer(displayExists, 0);


    if(displayIndex == -1  )  {

        addInitDisplayData(displayName, displayStatus);

    } else {

            updateInitDisplayData(initData, displayIndex);

    }


}


updateSetDebug(string data){

    //ownerSayTag("inside: updateSetText");


    list initData = llParseString2List(data, ["|"], []);

    refreshInitDisplayData(initData);

    string displayText = "";
    integer displayStrideCount = 0;

    //        while( displayStrideCount < (llGetListLength(initDisplayData) / displayStrideLength )){



    //                displayText +=  llList2String(initDisplayData, (displayStrideCount * displayStrideLength) ) + " : " + llList2String(initDisplayData, ((displayStrideCount * displayStrideLength) + 1) ) + "\n";

    //            displayStrideCount++;
    //        }


    //        llSetText(displayText,<1.0,1.0,1.0>,1.0);

    //ownerSayTag("leaving: updateSetText");

    //return 0;

}





/////////////// end shared display functions ////////








/////////////// BEGIN LibraryStridedLists //////////////////

// Strided Functions For working with Strided Lists.
// By Aakanaar LaSalle

// the intStride parameter is the length of the strides within the list
// the intIndex is which stride we're working with.
// the intSubIndex is which element of the stride we're working with.


// Deletes a Stride from a List
list fncDeleteStride(list lstSource, integer intIndex, integer intStride)
{
    integer intNumStrides = fncStrideCount(lstSource, intStride);

    if (intNumStrides != 0 && intIndex < intNumStrides)
    {
        integer intOffset = intIndex * intStride;
        return llDeleteSubList(lstSource, intOffset, intOffset + (intStride - 1));
    }
    return lstSource;
}

// Returns a Stride from a List
list fncGetStride(list lstSource, integer intIndex, integer intStride)
{
    integer intNumStrides = fncStrideCount(lstSource, intStride);

    if (intNumStrides != 0 && intIndex < intNumStrides)
    {
        integer intOffset = intIndex * intStride;
        return llList2List(lstSource, intOffset, intOffset + (intStride - 1));
    }
    return [];
}


// Retrieve a single element from a Stride within a List
list fncGetElement(list lstSource, integer intIndex, integer intSubIndex, integer intStride)
{
    if (intSubIndex >= intStride) { return []; }

    integer intNumStrides = fncStrideCount(lstSource, intStride);

    if (intNumStrides != 0 && intIndex < intNumStrides)
    {
        integer intOffset = (intIndex * intStride) + intSubIndex;
        return llList2List(lstSource, intOffset, intOffset);
    }
    return [];
}

// Update a single item in a Stride within a List
list fncReplaceElement(list lstSource, list lstItem, integer intIndex, integer intSubIndex, integer intStride)
{
    integer intNumStrides = fncStrideCount(lstSource, intStride);

    if (llGetListLength(lstItem) != 1) { return lstSource; }

    if (intNumStrides != 0 && intIndex < intNumStrides)
    {
        integer intOffset = (intIndex * intStride) + intSubIndex;
        return llListReplaceList(lstSource, lstItem, intOffset, intOffset);
    }
    return lstSource;
}

// Retrieve a single element from all strides within a list
list fncGetElementFromAllStrides(list lstSource, integer intSubIndex, integer intStride)
{
    if (intSubIndex >= intStride) { return []; }

    integer intNumStrides = llGetListLength(lstSource) / intStride;
    list lstRetVal = [];
    if (intNumStrides != 0)
    {
        integer x;
        integer intOffset;
        for (x = 0; x < intNumStrides; x++)
        {
            intOffset = (x * intStride) + intSubIndex;
            lstRetVal += llList2List(lstSource, intOffset, intOffset);
        }
    }
    return lstRetVal;
}

/////////////// END   LibraryStridedLists //////////////////




//None of these parameters need to be changed or set




// menu related vars





integer destinationStrideLength = 8;



// Stargate configuration settings
integer tpType = 0;
integer hgEnabled = 0;


integer menuSet = 0;
integer destinationSet = 0;



// http<->db related vars
string protocol = "http";
string thirdLevel = "basekix";
string secondLevel = "rollin";
string topLevel = "com";
string URL ;
string HGid  = "";           // HyperGrid ID




// teleporter related
string destination_type = "";
string destination_name = "";
vector destination_landing_point;
vector landing_point_facing;
string destination_gatekey = "";




initializeStrings(){

    URL = protocol + "://" + thirdLevel + "." + secondLevel + "." + topLevel + "/"; // getHGData url

}













/// begin settings



setHGStatus(integer status){

    hgEnabled = status;

}

setTPType(integer status){

    tpType = status;

}



setDestination(integer status){

    destinationSet = status;


}


setBasicGridTeleport(string str){
    ownerSayTag("setBasicGridTeleport >>>");

    list newRegionInfo = llParseString2List(str, ["|"], []);
    destination_name = llList2String(newRegionInfo, 0);
    destination_landing_point = (vector)llList2String([llList2String(newRegionInfo, 1)], 0);
    landing_point_facing = (vector)llList2String([llList2String(newRegionInfo, 2)], 0);
    destination_gatekey = llList2String(newRegionInfo, 3);

    updateSetDebug("Destination|" + destination_name);
    ownerSayTag("destination_name: " + destination_name);
    ownerSayTag("<<< setBasicGridTeleport ");
}

setHyperGridTeleport(string str)
{
    ownerSayTag("setHyperGridTeleport >>>");


    list newRegionInfo = llParseString2List(str, ["|"], []);
    destination_name = llList2String(newRegionInfo, 0);
    destination_landing_point = (vector)llList2String([llList2String(newRegionInfo, 1)], 0);
    landing_point_facing = (vector)llList2String([llList2String(newRegionInfo, 2)], 0);
    destination_gatekey = llList2String(newRegionInfo, 3);

    updateSetDebug("Destination|" + destination_name);
    ownerSayTag("destination_name: " + destination_name);
    ownerSayTag("<<< setHyperGridTeleport");

}


getDestination(){

    // if(mainDiaCh != 0){
    llMessageLinked(LINK_SET, destinationSet, "##settings##setDestination##", NULL_KEY);
    // }

}

/// end settings

integer core_listen(integer _ch, key _id, string data){

    ownerSayTag("core_listen >>>");
    ownerSayTag("_id: " + (string)_id);
    updateSetDebug("Listen|" + (string)_ch );

    llMessageLinked(LINK_SET, _ch, "##menu##listen_menu##" + data, _id);
    //        llMessageLinked(LINK_SET, _ch, "##main##listen_main##" + data, _id);
    llMessageLinked(LINK_SET, _ch, "##admin##listen_admin##" + data, _id);
    llMessageLinked(LINK_SET, _ch, "##list##listen_list##" + data, _id);
    llMessageLinked(LINK_SET, _ch, "##dial##listen_dial##" + data, _id);

    //        if(listen_main(_ch, _id, data)){
    //        } else if(listen_admin(_ch, _id, data)){
    //        if(listen_admin(_ch, _id, data)){
    //        } else if(listen_list(_ch, _id, data)){
    //        } else {
    //            listen_dial(_ch, _id, data);
    //        }
    ownerSayTag("<<< core_listen");

    return 0;

}

resetAllModules(){

    llMessageLinked(LINK_THIS, 0, "##settings##resetModule##" , NULL_KEY);
    llMessageLinked(LINK_THIS, 0, "##dial##resetModule##" , NULL_KEY);
    llMessageLinked(LINK_THIS, 0, "##menu##resetModule##" , NULL_KEY);
    llMessageLinked(LINK_THIS, 0, "##init##resetModule##" , NULL_KEY);
    llMessageLinked(LINK_THIS, 0, "##list##resetModule##" , NULL_KEY);
    llMessageLinked(LINK_THIS, 0, "##monitor##resetModule##" , NULL_KEY);
    llMessageLinked(LINK_THIS, 0, "##display##resetModule##" , NULL_KEY);

}


integer dial_loaded = 0;
integer display_loaded = 0; // assume display is loaded, also whole system should funtion even if it is not loaded/present
integer init_loaded = 0;
integer list_loaded = 0;
integer menu_loaded = 0;
integer settings_loaded = 0;

float time = 2; // timer interval

default
{

    state_entry()
    {
        resetAllModules();
        publishDisplay("Ready for Initialization");
        //ownerSayTag("Core: Ready for Initialization");
        llMessageLinked(LINK_SET, 0, "##display##waitInit##" , NULL_KEY);

        llSetTimerEvent(time); // generate a timer event every 2 seconds

        llSetText("..:: Welcome to The HyperGates ::..\nTheHyperGates.com\n- - -\nSuccessful Core Entry",<1.0,1.0,1.0>,1.0);
    }

    timer()
    {
        //llOwnerSay("core:default:timer");
        //if( (llGetLinkNumber()) > 0 ){
        llMessageLinked(LINK_ROOT, 0, "##display##waitInit##" , NULL_KEY);
        //}
        llSetText("..:: Welcome to The HyperGates ::..\nTheHyperGates.com\n- - -\nPinging Display ...",<1.0,1.0,1.0>,1.0);
        llSetTimerEvent(time); // generate a timer event every 2 seconds
        //        llResetScript();

    }

    link_message(integer sender_num, integer num, string str, key id)
    {
        //    ownerSayTag("Core: begin link_message: " + str);
        //       llOwnerSay("(Core:default)begin link_message: " + str);

        list comm = llParseString2List(str, ["##"], [""]);

        string commStr_0 = llList2String( comm,0);
        string commStr_1 = llList2String( comm,1);

        if(commStr_0 == "core"){
            //            llSay(0,str);
            if(commStr_1 == "beginInit"){
                llSetTimerEvent(0);
                llMessageLinked(LINK_SET, 0, "##display##waitInit##" , NULL_KEY);

                state initialize;
            }
        }

        if(commStr_0 == "display"){
            //            llSay(0,str);
            if(commStr_1 == "publishDisplay"){
                publishDisplay("");
            }
        }

        if(commStr_0 == "debug"){
            //            llSay(0,str);
            if(commStr_1 == "publishDebug"){
                publishDebug("");
            }
        }

        //ownerSayTag("Core: end link_message: " + str);

    }


    on_rez(integer start_param) {
        // every time we're rezzed, reset the script
        // this ensures that if we're transferred to a new owner, we're listening to them and not still to the previous one
        llResetScript();
        publishDisplay("Rezzed");
        llSetText("..:: Welcome to The HyperGates ::..\nTheHyperGates.com\n- - -\nSuccessful Core Rez",<1.0,1.0,1.0>,1.0);
    }



}


state initialize
{
    state_entry()
    {
        //        llResetScript();
        llSetText("..:: Welcome to The HyperGates ::..\nTheHyperGates.com\n- - -\nBeginning Initialization ...",<1.0,1.0,1.0>,1.0);

        publishDisplay("Initializing");

        initializeStrings();

        publishDisplay("Initialized");


        llMessageLinked(LINK_SET, 0, "##settings##resetModule##" , NULL_KEY);
        llMessageLinked(LINK_SET, 0, "##dial##resetModule##" , NULL_KEY);
        llMessageLinked(LINK_SET, 0, "##menu##resetModule##" , NULL_KEY);
        llMessageLinked(LINK_SET, 0, "##init##resetModule##" , NULL_KEY);
        llMessageLinked(LINK_SET, 0, "##list##resetModule##" , NULL_KEY);
        llMessageLinked(LINK_SET, 0, "##monitor##resetModule##" , NULL_KEY);
        //         llMessageLinked(LINK_SET, 0, "##display##resetModule##" , NULL_KEY);


        state waitForModules;
    }
}



state waitForModules
{

    state_entry()
    {
        publishDisplay("Waiting for Modules");
        llSetTimerEvent(time); // generate a timer event every 2 seconds
    }

    timer()
    {
        //    llOwnerSay("checking loaded moduels status: "
        //    + (string)dial_loaded + ":"
        //    + (string)display_loaded + ":"
        //    + (string)init_loaded + ":"
        //    + (string)list_loaded + ":"
        //    + (string)menu_loaded + ":"
        //    + (string)settings_loaded + ":"
        //    );
        if(dial_loaded == 1 &&
            display_loaded == 1 &&
                init_loaded == 1 &&
                    list_loaded == 1 &&
                        menu_loaded == 1 &&
                            settings_loaded == 1){

                                publishDisplay("All Modules Loaded");
                                llMessageLinked(LINK_SET, 0, "##display##waitInit##" , NULL_KEY);

                                llSetTimerEvent(0); // generate a timer event every 2 seconds
                                state initializeModules;

                            } else {
                                    //    llMessageLinked(LINK_SET, 0, "##settings##resetModule##" , NULL_KEY);
                                    llSetTimerEvent(time); // generate a timer event every 2 seconds
                            }
    }


    link_message(integer sender_num, integer num, string str, key id)
    {
        //    ownerSayTag("Core: begin link_message: " + str);

        list comm = llParseString2List(str, ["##"], [""]);
        //llOwnerSay("(Core:waitForModules)begin link_message: " + str);

        string commStr_0 = llList2String( comm,0);
        string commStr_1 = llList2String( comm,1);
        string commStr_2 = "";


        if(commStr_0 == "core"){
            //            llSay(0,str);
            if(commStr_1 == "loaded"){
                commStr_2 = llList2String( comm,2);
                if(commStr_2 == "display"){
                    display_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##display##waitInit##" , NULL_KEY);

                } else if(commStr_2 == "settings"){
                        settings_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##settings##waitInit##" , NULL_KEY);

                } else if(commStr_2 == "dial"){
                        dial_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##dial##waitInit##" , NULL_KEY);


                } else if(commStr_2 == "list"){
                        list_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##list##waitInit##" , NULL_KEY);


                } else if(commStr_2 == "menu"){
                        menu_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##menu##waitInit##" , NULL_KEY);


                } else if(commStr_2 == "init"){
                        init_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##init##waitInit##" , NULL_KEY);

                }
            }

        }
    }

}

state initializeModules
{
    state_entry()
    {
        //        llResetScript();

        publishDisplay("Initializing Modules");

        llMessageLinked(LINK_SET, 0, "##settings##beginInit##" , NULL_KEY);



    }

    link_message(integer sender_num, integer num, string str, key id)
    {
        //    ownerSayTag("Core: begin link_message: " + str);

        list comm = llParseString2List(str, ["##"], [""]);

        string commStr_0 = llList2String( comm,0);
        string commStr_1 = llList2String( comm,1);
        string commStr_2 = "";


        if(commStr_0 == "core"){
            //            llSay(0,str);
            if(commStr_1 == "initialized"){
                commStr_2 = llList2String( comm,2);
                if(commStr_2 == "settings"){
                    llMessageLinked(LINK_SET, 0, "##dial##beginInit##" , NULL_KEY);

                } else if(commStr_2 == "dial"){
                        llMessageLinked(LINK_SET, 0, "##list##beginInit##" , NULL_KEY);


                } else if(commStr_2 == "list"){
                        llMessageLinked(LINK_SET, 0, "##menu##beginInit##" , NULL_KEY);


                } else if(commStr_2 == "menu"){
                        llMessageLinked(LINK_SET, 0, "##init##beginInit##" , NULL_KEY);


                } else if(commStr_2 == "init"){
                        state activated;

                }
            }
        }

        if(commStr_0 == "status"){
            //            llSay(0,str);
            if(commStr_1 == "Ready for Initialization"){
                if(commStr_2 == "settings"){
                    //    state initialize;
                }
            }
        }

        if(commStr_0 == "display"){
            //            llSay(0,str);
            if(commStr_1 == "publishDisplay"){
                publishDisplay("");
            }
        }

        if(commStr_0 == "debug"){
            //            llSay(0,str);
            if(commStr_1 == "publishDebug"){
                publishDebug("");
            }
        }


    }
}


state activated
{
    state_entry()
    {
        //        llResetScript();

        publishDisplay("Activated");
        llSetTimerEvent(8); // generate a timer event every 2 seconds


    }

    timer()
    {
        publishDisplay("Activated");
        llSetTimerEvent(0); // generate a timer event every 2 seconds


    }
    touch_start(integer _det) {
        ownerSayTag("<<< touch_start");
        llMessageLinked(LINK_SET, _det, "##default##remote_touch_start##", llDetectedKey(0));

        ownerSayTag("destinationSet: " + (string)destinationSet);
        if(destinationSet == 0){


        } else {
                ownerSayTag("tpType: " + (string)tpType);

            if(tpType == 0){
                ownerSayTag("destination_name: " + destination_name);
                ownerSayTag("destination_landing_point: " + (string)destination_landing_point);
                ownerSayTag("landing_point_facing: " + (string)landing_point_facing);
                llMapDestination(destination_name, destination_landing_point, landing_point_facing);
            } else {
                    // osfunction
                    osTeleportAgent(llDetectedKey(0), destination_name, destination_landing_point, landing_point_facing);
            }
        }

        ownerSayTag("<<< touch_start");
    }



    listen(integer _ch, string _nm, key _id, string data) {
        ownerSayTag("(core)inside: listen");
        ownerSayTag("_id: " + (string)_id);
        llMessageLinked(LINK_SET, _ch, "##core##core_listen##" + data, _id);

        ownerSayTag("(core)leaving: listen");

    }



    link_message(integer sender_num, integer num, string str, key id)
    {
        //ownerSayTag("Core: begin link_message: " + str);

        list comm = llParseString2List(str, ["##"], [""]);

        string commStr_0 = llList2String( comm,0);
        string commStr_1 = llList2String( comm,1);
        string commStr_2 = "";

        if(commStr_0 == "core"){
            //            llSay(0,str);
            if(commStr_1 == "core_listen"){
                commStr_2 = llList2String( comm,2);
                core_listen(num, id, commStr_2);
            } else if(commStr_1 == "reActivate"){
                    publishDisplay("Activated");

            } else if(commStr_1 == "reInsertModule"){
                    publishDisplay("Re-inserting module");

            }


            if(commStr_1 == "loaded"){
                commStr_2 = llList2String( comm,2);
                if(commStr_2 == "display"){
                    display_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##display##waitInit##" , NULL_KEY);

                } else if(commStr_2 == "settings"){
                        settings_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##settings##waitInit##" , NULL_KEY);

                } else if(commStr_2 == "dial"){
                        dial_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##dial##waitInit##" , NULL_KEY);


                } else if(commStr_2 == "list"){
                        list_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##list##waitInit##" , NULL_KEY);


                } else if(commStr_2 == "menu"){
                        menu_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##menu##waitInit##" , NULL_KEY);


                } else if(commStr_2 == "init"){
                        init_loaded = 1;

                    llMessageLinked(LINK_SET, 0, "##init##waitInit##" , NULL_KEY);

                }

                publishDisplay("Re-inserting module");

            }


            if(commStr_1 == "initialized"){
                commStr_2 = llList2String( comm,2);
                if(commStr_2 == "settings"){
                    llMessageLinked(LINK_SET, 0, "##settings##beginInit##" , NULL_KEY);

                } else if(commStr_2 == "dial"){
                        llMessageLinked(LINK_SET, 0, "##dial##beginInit##" , NULL_KEY);


                } else if(commStr_2 == "list"){
                        llMessageLinked(LINK_SET, 0, "##list##beginInit##" , NULL_KEY);


                } else if(commStr_2 == "menu"){
                        llMessageLinked(LINK_SET, 0, "##menu##beginInit##" , NULL_KEY);


                } else if(commStr_2 == "init"){
                        llMessageLinked(LINK_SET, 0, "##init##beginInit##" , NULL_KEY);

                }
            }

        }

        if(commStr_0 == "display"){
            //            llSay(0,str);
            if(commStr_1 == "publishDisplay"){
                publishDisplay("");
            }
        }


        if(commStr_0 == "debug"){
            //            llSay(0,str);
            if(commStr_1 == "publishDebug"){
                publishDebug("");
            }
        }

        if(commStr_0 == "settings"){
            //            llSay(0,str);
            if(commStr_1 == "setHGStatus"){
                setHGStatus(num);
            } else if(commStr_1 == "setTPType"){
                    setTPType(num);
            } else if(commStr_1 == "setDestination"){
                    setDestination(num);
            } else if(commStr_1 == "getDestination"){
                    getDestination();
            } else if(commStr_1 == "setBasicGridTeleport"){
                    commStr_2 = llList2String( comm,2);
                setBasicGridTeleport(commStr_2);
            } else if(commStr_1 == "setHyperGridTeleport"){
                    commStr_2 = llList2String( comm,2);
                setHyperGridTeleport(commStr_2);
            }
        }

        //ownerSayTag("Core: end link_message: " + str);

    }



}

